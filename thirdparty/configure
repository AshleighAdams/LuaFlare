#!/usr/bin/env lua

local config = [[
PREFIX = $(DESTDIR)%PREFIX
LUA = %LUA
LUA_DEPENDS = %LUA_DEPENDS

# tools
CP = %cp --remove-destination
MKDIR = %mkdir -p
CAT = %cat
SED = %sed
LN = %ln -sf
GIT = %git

USER = %USER
SERVICE_SYSTEM = %SERVICE
NGINX_SITE_HTTP_PORT = %NGINX_HTTP_PORT
NGINX_SITE_HTTPS_PORT = %NGINX_HTTPS_PORT


LUASERVER_LIB_DIR       = $(PREFIX)/lib/luaserver
LUASERVER_LIB_DIR_STR   = $(subst $(DESTDIR),,$(LUASERVER_LIB_DIR))
LUASERVER_BIN_DIR       = $(PREFIX)/bin
LUASERVER_BIN_DIR_STR   = $(subst $(DESTDIR),,$(LUASERVER_BIN_DIR))
LUASERVER_CFG_DIR       = $(DESTDIR)/etc/luaserver
LUASERVER_CFG_DIR_STR   = $(subst $(DESTDIR),,$(LUASERVER_CFG_DIR))
NGINX_DIR               = $(DESTDIR)%NGINX_DIR
BASH_COMPLETION_DIR     = $(DESTDIR)%BASH_COMPLETION_DIR
SYSTEMD_UNIT_DIR        = $(DESTDIR)%SYSTEMD_UNIT_DIR
SYSVINIT_DAEMON_DIR     = $(DESTDIR)%SYSVINIT_DAEMON_DIR

# auto
VERSION=`$(GIT) describe --tags --always`
]]

local vars = {}
local function set_var(key, value)
	vars[key] = value
end

local function escape_pattern(i)
	return (i:gsub("[%-%+%(%)%[%]%.%?]", "%%%1"))
end

local function escape_gsub(i)
	return (i:gsub("%%", "%%%%"))
end

local paths
local function find_program(name, shoulderror)
	if not paths then
		paths = {}
		
		local path_env = os.getenv("PATH"):gsub("([^:]+)", function(path)
			table.insert(paths, path .. "/?")
			if path:sub(-4) == "/bin" then
				table.insert(paths, path:sub(1, -5) .. "/sbin/?")
			end
		end)
	end
	
	io.stdout:write("locating " .. name .. "... ")
	name = escape_gsub(name)
	
	for k,path in ipairs(paths) do
		path = path:gsub("%?", name)
		local got = io.open(path, "r")
		
		if got then
			got:close()
			print("okay: " .. path)
			return path
		end
	end
	
	if shoulderror == nil or shoulderror == true then
		print("error: not found")
		os.exit(1)
	else
		print("not found")
	end
	
	return nil
end

local function find_arg(name, default)
	name = escape_pattern(name)
	local patt = string.format("%%-%%-%s=(.+)", name)
	for k,v in pairs(arg) do
		local found = v:match(patt) or (v:match("%-%-" .. name) and "" or nil)
		if found then return found end
	end
	
	return default
end


local function set_prefix()
	local prefix = find_arg("prefix", "/usr")
	print("prefix: " .. prefix)
	set_var("PREFIX", prefix)
end

local function set_lua()
	local v = find_arg("lua", "lua")
	set_var("LUA", v)
end

local function set_tools()
	local tools = {"cp", "mkdir", "cat", "sed", "ln", "git"}
	for k,tool in ipairs(tools) do
		local path = find_program(tool)
		set_var(tool, path)
	end
end

local function set_user()
	local user = find_arg("user", "www-data")
	
	print("user: " .. user)
	set_var("USER", user)
end

local function set_nginx()
	if find_arg("no-nginx") ~= nil then return end
	
	-- make sure they have nginx installed
	local nginx = find_program("nginx")
	
	local proc = io.popen(nginx.." -V 2> /dev/stdout")
	local output = proc:read("*a")
	proc:close()
	
	local location = output:match("%-%-conf%-path=(.-)/nginx%.conf")
	if not location then
		print("could not locate nginx's configuration path")
		os.exit(1)
	end
	
	print("nginx dir: " .. location)
	set_var("NGINX_DIR", location)
	
	local http_port = find_arg("nginx-http-port", "80")
	local https_port = find_arg("nginx-https-port", "443")
	
	print("nginx http/https ports: " .. http_port .. " & " .. https_port)
	
	set_var("NGINX_HTTP_PORT", http_port)
	set_var("NGINX_HTTPS_PORT", https_port)
	table.insert(install, "install-nginx-site")
end

local function set_system_service()
	local system_service
	
	if find_arg("system-service") then
		system_service = find_arg("system-service")
	elseif find_program("systemd", false) then
		system_service = "systemd"
	elseif find_program("initctl", false) then
		system_service = "sysvinit" -- "upstart" -- upstart not complete, fall back to sysvinit
	elseif find_program("init", false) then
		system_service = "sysvinit"
	else
		print("no system service manager found, will not install system daemon")
		return
	end
	
	print("system service: " .. system_service)
	set_var("SERVICE", system_service)
	table.insert(install, "install-" .. system_service .. "-service")
	
	if system_service == "systemd" then
		local unit_path = find_arg("systemd-unit-path")
		
		if not unit_path then
			local systemctl = io.popen(find_program("systemctl") .. " show")
			local output = systemctl:read("*a")
			systemctl:close()
			
			unit_path = output:match("UnitPath=(.-)%s")
		end
		
		print("systemd unit path: " .. unit_path)
		set_var("SYSTEMD_UNIT_DIR", unit_path)
		
		table.insert(lua_depends, "systemd.daemon")
	elseif system_service == "sysvinit" then
		set_var("SYSVINIT_DAEMON_DIR", "/etc/init.d")
	elseif system_service == "upstart" then
		set_var("UPSTART_DAEMON_DIR", "/etc/init")
	end
end

local function set_bash_dir()
	local p = io.popen(find_program("locate") .. " bash_completion.d")
	local path = p:read("*l")
	p:close()
	
	if not path then
		return print("bash completion path not found")
	end
	table.insert(install, "install-bash-completion")
	
	print("bash completion dir: " .. path)
	set_var("BASH_COMPLETION_DIR", path)
end

install = {}
lua_depends = {"bit", "lfs", "md5", "posix", "socket", "ssl", "xssfilter"}

set_prefix()
set_lua()
set_tools()
set_user()
set_nginx()
set_system_service()
set_bash_dir()

set_var("LUA_DEPENDS", table.concat(lua_depends, " "))

config = config:gsub("%%([A-Za-z_][A-Za-z0-9_]+)", function(name)
	local ret = vars[name]
	if not ret then
		print("warning: unusued variable " .. name)
		return ""
	end
	return ret
end)
config = config .. "\ninstall-extra: " .. table.concat(install, " ")

local f = assert(io.open("config", "w"))
f:write(config)
f:close()

print("configuring complete")
